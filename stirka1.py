from aiogram import Bot, Dispatcher, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.filters import CommandStart, Command
import asyncio
from datetime import datetime, timedelta

WASHING_DURATION = 50 # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∏—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
CHECK_INTERVAL = 10 # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã—Ö x —Å–µ–∫—É–Ω–¥
MACHINES_COUNT = 5 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏—Ä–∞–ª–æ–∫
washing_machines = {num: {"status": "free", "until": None, "user_id": None, "broken": False} for num in range(1, MACHINES_COUNT+1)}
ADMIN_IDS = [5983331777, 2087466437] # –¢–ì –∞–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –º–æ—ë)

bot = Bot(token='7759293791:AAFz1qN7c-ayhGF0aSvHOeUbwf7KGC8lSZI')
dp = Dispatcher()

markup_admin = InlineKeyboardMarkup(inline_keyboard=[
	[InlineKeyboardButton(
		text=f"–ú–∞—à–∏–Ω–∫–∞ {num} - {'üö´' if data['broken'] else '‚úÖ'}",
		callback_data=f'toggle_broken_{num}'
	)] for num, data in washing_machines.items()
])

async def check_and_free_machines():
	while True:
		await asyncio.sleep(CHECK_INTERVAL)
		current_time = datetime.now()
		for num, data in washing_machines.items():
			if data["status"] == "busy" and data["until"] <= current_time and not data["broken"]:
				user_id = data["user_id"]
				washing_machines[num] = {"status": "free", "until": None, "user_id": None, "broken": data["broken"]}
				if user_id:
					try:
						await bot.send_message(
							user_id,
							f"üîî –ú–∞—à–∏–Ω–∫–∞ ‚Ññ{num} –æ—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å!\n"
							"–ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –±–µ–ª—å—ë."
						)
					except Exception as e:
						print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def markup_admin():
	return InlineKeyboardMarkup(inline_keyboard=[
		[InlineKeyboardButton(
			text=f"–ú–∞—à–∏–Ω–∫–∞ {num} - {'üö´' if data['broken'] else '‚úÖ'}",
			callback_data=f'toggle_broken_{num}'
		)] for num, data in washing_machines.items()
	])


@dp.message(Command('admin'))
async def admin_panel(message: Message):
	"""–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
	if message.from_user.id not in ADMIN_IDS:
		await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
		return
	markup = InlineKeyboardMarkup(inline_keyboard=[
		[InlineKeyboardButton(
			text=f"–ú–∞—à–∏–Ω–∫–∞ {num} - {'üö´' if data['broken'] else '‚úÖ'}",
			callback_data=f'toggle_broken_{num}'
		)] for num, data in washing_machines.items()
	])
	await message.answer("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Å—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω–æ–∫):",reply_markup=markup)

	
@dp.callback_query(F.data.startswith('toggle_broken_'))
async def toggle_broken(callback: CallbackQuery):
	"""–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª–æ–º–∫–∏"""
	machine_num = int(callback.data.split('_')[2])
	washing_machines[machine_num]["broken"] = not washing_machines[machine_num]["broken"]
	status = "üö´ –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–∞" if washing_machines[machine_num]["broken"] else "‚úÖ –ò—Å–ø—Ä–∞–≤–Ω–∞"
	markup = InlineKeyboardMarkup(inline_keyboard=[
		[InlineKeyboardButton(
			text=f"–ú–∞—à–∏–Ω–∫–∞ {num} - {'üö´' if data['broken'] else '‚úÖ'}",
			callback_data=f'toggle_broken_{num}'
		)] for num, data in washing_machines.items()
	])
	await callback.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Å—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω–æ–∫):",reply_markup=markup)
	await callback.answer(f"–ú–∞—à–∏–Ω–∫–∞ {machine_num}: {status}", show_alert=True)


@dp.message(CommandStart())
async def start(message: Message):
	markup = ReplyKeyboardMarkup(keyboard=[
		[KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å')],
		[KeyboardButton(text='–°—Ç–∏—Ä–∞—é')]],
		resize_keyboard=True,
		input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É...')
	await message.answer('''üèÜ –°—Ç–∏—Ä–∞–ª—å–Ω—ã–π –ë–æ—Ç
	
üöÄ –í—Å—ë –ø—Ä–æ—Å—Ç–æ:

üìä "–ó–∞–Ω—è—Ç–æ—Å—Ç—å" ‚Üí –°–≤–æ–±–æ–¥–Ω—ã–µ/–∑–∞–Ω—è—Ç—ã–µ –º–∞—à–∏–Ω–∫–∏

üß∫ "–Ø —Å—Ç–∏—Ä–∞—é!" ‚Üí –ó–∞–∫—Ä–µ–ø–ª—è–µ—à—å –∑–∞ —Å–æ–±–æ–π ‚Üí –ü–æ–ª—É—á–∞–µ—à—å —Ç–∞–π–º–µ—Ä

üîî –ê–≤—Ç–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è

üí° –í—ã–≥–æ–¥—ã:
‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö —Å–ø–æ—Ä–æ–≤ –∑–∞ –æ—á–µ—Ä–µ–¥—å
‚Ä¢ –ß—ë—Ç–∫–∏–π —Ç–∞–π–º–µ—Ä –≤–º–µ—Å—Ç–æ –¥–æ–≥–∞–¥–æ–∫
‚Ä¢ –í–∏–¥–Ω–æ –≤—Å–µ –º–∞—à–∏–Ω–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ

üëâ –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é ‚Üì''', reply_markup=markup)
	
	
@dp.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å')
async def view_employment(message: Message):
	current_time = datetime.now()
	text = ""
	for num, data in washing_machines.items():
		if data["broken"]:
			text += f"üî¥ {num} - —Å–ª–æ–º–∞–Ω–∞\n"
		elif data["status"] == "free":
			text += f"üü¢ {num} - —Å–≤–æ–±–æ–¥–Ω–∞\n"
		else:
			time_left = data["until"] - current_time
			minutes = max(0, int(time_left.total_seconds() // 60)+1)
			text += f"üî¥ {num} - –∑–∞–Ω—è—Ç–∞ (–æ—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω)\n"
	await message.answer(text)
	
	
@dp.message(F.text == '–°—Ç–∏—Ä–∞—é')
async def wash(message: Message):
	markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=str(i), callback_data=f'wash_{i}') for i in range(1, MACHINES_COUNT+1)]])
	await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ä–∞–ª–∫—É (—Å—Ç–∏—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç {WASHING_DURATION} –º–∏–Ω—É—Ç):", reply_markup=markup)


@dp.callback_query(F.data.startswith('wash_'))
async def washing_machine(callback: CallbackQuery):
	washing_machine_number = int(callback.data.split('_')[1])
	if washing_machines[washing_machine_number]["status"] == "busy":
		await callback.answer("‚ùå –≠—Ç–∞ –º–∞—à–∏–Ω–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
		return
	if washing_machines[washing_machine_number]["broken"]:
		await callback.answer("‚ùå –≠—Ç–∞ –º–∞—à–∏–Ω–∫–∞ –ø–æ–ª–æ–º–∞–Ω–∞!", show_alert=True)
		return
	end_time = datetime.now() + timedelta(minutes=WASHING_DURATION)
	washing_machines[washing_machine_number] = {"status": "busy", "until": end_time, "user_id": callback.from_user.id, "broken": washing_machines[washing_machine_number]["broken"]}
	await callback.message.edit_text(
		f"‚úÖ –í—ã –∑–∞–Ω—è–ª–∏ –º–∞—à–∏–Ω–∫—É ‚Ññ{washing_machine_number}\n"
		f"‚è≥ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time.strftime('%H:%M')}\n"
	)
	
	
async def main():
	await bot.delete_webhook(drop_pending_updates=True)
	asyncio.create_task(check_and_free_machines())
	await dp.start_polling(bot)

if __name__ == "__main__":
	asyncio.run(main())
	